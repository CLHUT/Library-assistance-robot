#ifdef ESP8266
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#elif defined(ESP32)
#include <WiFi.h>
#include <ESPmDNS.h>
#else
#error "Board not found"
#endif

#include <WebSocketsServer.h>
#include <EEPROM.h>

#include <ArduinoJson.h>


////////////////////////////////////////////////////////////

#include <SPI.h>
#include <MFRC522.h>

#define in1 32 //Motor1  L293 Pin in1 
#define in2 13 //Motor1  L293 Pin in1 
#define in3 14 //Motor2  L293 Pin in1 
#define in4 27 //Motor2  L293 Pin in1
#define R_S 15//ir sensor Right
#define L_S 4 //ir sensor Left
//#define trigger 2     //Trigger

//#define echo 4        //Echo
#define enable1Pin  26 

const int trigPin = 25;
const int echoPin = 33;
//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701
long duration;
float distanceCm;
float distanceInch;
#define SS_PIN  21  /*Slave Select Pin*/
#define RST_PIN 22  /*Reset Pin for RC522*/
//#define LED_G   12   /*Pin 8 for LED*/
MFRC522 mfrc522(SS_PIN, RST_PIN);   /*Create MFRC522 initialized*/

int pinval;
int RfidFlag,NewRfidFlag , lineStop;
// Setting PWM properties
const int freq = 30000;
const int pwmChannel = 0;
const int resolution = 8;
int dutyCycle = 100;
///////////////////////////////////////////////////////////////////
int pro1Flag ,pro2Flag ,pro3Flag,pro4Flag,pro5Flag,pro6Flag , shopFlag , homeFlag, returnFlag;


///////////////////////////////////////////////////////////////////
//#define LED1 13
//#define LED2 12

int button_flag ,button_flag1 , TWC ,TWC1,SF , TWC2;  // TWC(Test Write Cache) SF(sensor flag)
int p1 ,p2,p3,p4,p5,p6,p7 ,pv1 , pv2 ,pv3 ,pv4 , pv5 ,pv6 ,pv7 ,pv8;// relay 8 button cache


int dFlag;

char webpage[] PROGMEM = R"=====(
   <!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
* {box-sizing: border-box}

/* Set height of body and the document to 100% */
body, html {
  /*height: 100%;*/
  margin: 0;
  font-family: Arial;
  background-color: #299af7;
  color: white;

}
.bx{
    border:solid;
    border-color: #4CAF50;
    border-width: 5px;
    padding: 10px 32px;
    text-align: center;
    display: inline;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
}
.box1{
  background-color: #299af7;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;

}
.box{
  background-color: rgb(8, 109, 177);
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  

}
.box2{
  background-color: rgb(77, 150, 146);
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
 

}
.box3{
  background-color: dodgerblue;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  

}
.box4{
  background-color: #555;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  

}
.box5{
  background-color:rgb(34, 145, 6);
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  

}
.slidecontainer {
  width: 100%;
}
.slider
{
-webkit-appearance: none;
  width: 80%;
  height: 25px;
  background: #d3d3d3;
  outline: none;
  opacity: 1;
  -webkit-transition: .2s;
  transition: opacity .2s;
}
.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 25px;
  height: 25px;
  background: #04AA6D;
  cursor: pointer;
}
.slider:hover{
  opacity: 1;
  background: #777;
}

.slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  background: #04AA6D;
  cursor: pointer;
}

.button {
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  

}
.button1 {
  background-color: tomato;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
}


.button7 {
  background-color: tomato;
  border: none;
  color: white;
  opacity: 0.6;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
}
.button:hover{
  background-color: #777;
  
}
.button1:hover{
  background-color: #777;
}
.accordion {
  background-color:#47a518;
  color: rgb(245, 230, 230);
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  transition: 0.4s;
}
.accordion1 {
  background-color:dodgerblue;
  color: rgb(245, 230, 230);
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  transition: 0.4s;
}

.accordion2 {
  background-color: darkblue;
  color: rgb(245, 230, 230);
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
  transition: 0.4s;
}

.active, .accordion:hover {
  background-color: darkgreen; 
}
.active1, .accordion1:hover {
  background-color: mediumblue; 
}
.active2, .accordion2:hover {
  background-color: mediumblue; 
}

.panel {
  padding: 0 18px;
  display: none;
  background-color: green;
  overflow: hidden;
}
.panel1 {
  padding: 0 18px;
  display: none;
  background-color:#187dcf;
  overflow: hidden;
}
.panel2 {
  padding: 0 18px;
  display: none;
  background-color:blue;
  overflow: hidden;
}

/* Style tab links */
.tablink {
  background-color: #555;
  color: white;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 30px 16px;
  font-size: 16px;
  width: 20%;
}

.tablink:hover {
  background-color: #777;
}

/* Style the tab content (and add height:100% for full page content) */
.tabcontent {
  color: white;
  display: none;
  padding: 100px 20px;
  height: 100%;
}

</style>
</head>
<body >

  <center>
    <h2>Library-Assistant</h2>
</center>
<center>
    <div class="box">
    <center>
       
    <button id="one1" onclick= "one()" class="button">F</button>
    </center>
    <p></p>
    <center>
    <button id="two2" onclick= "two()" class="button">L</button>
    <button id="three3" onclick= "three()" class="button">S</button>
    <button id="four4" onclick= "four()" class="button">R</button>
  </center>
    <p></p>
    <center>
    <button id="five5" onclick= "five()" class="button">B</button>
    <p> </p>
 
  </div>
  </center>
  <div style="background-color: rgb(8, 109, 177);">

  <p></p>
  <div class="slidecontainer">
    <center>
    <P></P>
  
    <button id="six6" onclick= "six()" class="button">BOOK1 </button>
    <button id="seven7" onclick= "seven()" class="button">BOOK2 </button>
    <button id="eight8" onclick= "eight()" class="button">BOOK3</button>

    <button id="nin9" onclick= "nine9()" class="button">BOOK4 </button>
    <button id="te10" onclick= "ten10()" class="button">BOOK5 </button>
    <button id="ele11" onclick= "eleven11()" class="button">BOOK6</button>
  </center>
  </div>
  </div>
  <p></p>
  <center>

    <P>Item Selected :<span id="itemStatus">N/A </span></P>

  <div class="box">
  <center>
<div style = "background-color:rgb(168, 196, 105);">
    <button id="nine9" onclick= "nine()" class="button">TAKE</button>
  <button id="ten10" onclick= "ten()" class="button">Park</button>
  
</div>
</center>
  <p> </p>
  <p></p>
  <p></p>
</div>
</center>
  <script>
 var connection = new WebSocket('ws://'+location.hostname+':81/');
 var gh = 1,gh1 = 1,gh2 = 1,gh3 = 1,gh4 = 1,gh5 = 1,gh6 = 1,gh7 = 1,gh8 = 1 ,gh9 = 1, gh10 = 1, gh11 = 1, gh12 = 1;
 var co1 = 0 , co2 = 0, co3 = 0 ,co4 , co5=0 , co6 =0 , co7 =0 ,co8 =0;
var tester_status = 0 ;
var TWC4 = 0;
var sf = 0;
var writer_status = 0;
 var pv1 = 0 , pv2 = 50 , pv3 = 0 , pv4 =0 , pv5 = 0 , pv6 = 0 ,pv7 = 0 ,pv8 = 0 , pv =0;
 var sens_data = 0;
 var q1_data =0 , q2_data =0 ,q3_data =0 , q4_data =0,q5_data =0,q6_data =0,q7_data =0 ,q8_data = 0 ;


connection.onmessage = function(event){  //sensor value update functionn

  var full_data = event.data;//
  console.log(full_data);
  var data = JSON.parse(full_data);
  sens_data = data.sens;
  q1_data = data.q1;
  q2_data = data.q2;
  q3_data = data.q3;
  q4_data = data.q4;
  q5_data = data.q5;
  q6_data = data.q6;
  document.getElementById("Range").innerHTML=q1_data;


}



 function send_data()
{
  var full_data = '{"T" :'+tester_status+',"W":'+writer_status+',"TWC":'+TWC4+',"p1":'+pv1+',"p2":'+pv2+',"p3":'+pv3+',"p4":'+pv4+'}';
  connection.send(full_data);
}


function sli1()
{
    document.getElementById("SPEED").innerHTML=document.getElementById("my1").value;
 
    pv2 = document.getElementById("my1").value;
    send_data();

}

function one()
{
  
    gh1 = 0;
    pv1 = 1;
    send_data();
}

function two()
{  
  
    pv1= 3;
 
 send_data();
}
function three()
{
    pv1= 5;
    send_data();
}
function four()
{
    pv1= 7;
 send_data();
}
function five()
{
    pv1= 9; 
 send_data();
}
function six()
{   

  if(gh6 >1)
  {

    pv3= 11;
    pv1 = 11;
    gh6 = 0;
    co1 = 0;
    co4 = co1 + co2 + co3 + co5 + co6 + co7;
    document.getElementById("six6").style.backgroundColor=" #4CAF50";
    document.getElementById("itemStatus").innerHTML= co4;


  }
  else{
  pv3= 12;
  pv1 = 12;
  co1 = 1;
  co4 = co1 + co2 + co3 + co5 + co6 + co7;
  document.getElementById("six6").style.backgroundColor="tomato";
  document.getElementById("itemStatus").innerHTML= co4;


  
   
}

  gh6 += 1;  
 send_data();
}
function seven()
{

  if(gh7 >1)
  {
    pv3= 13;
    document.getElementById("seven7").style.backgroundColor=" #4CAF50";
    gh7 = 0;
    co2 = 0;
    co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
    document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;
   pv1 = 13;
  }
  else{
    document.getElementById("seven7").style.backgroundColor="tomato";
    co2 = 1;
    co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
    document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;


  pv3= 14;
   pv1 = 14;
}
  gh7 += 1;  
  // pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}
function eight()
{
  if(gh8 >1)
  {
    pv3= 15;
    gh8 = 0;
     pv1 = 15;
     co3 = 0;
     co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
     document.getElementById("eight8").style.backgroundColor=" #4CAF50";
     document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;



  }
  else{
  pv3= 16;
  co3 = 1;
  co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
  document.getElementById("eight8").style.backgroundColor="tomato";
  document.getElementById("itemStatus").innerHTML=co1 + co2 + co3 + co5 + co6 + co7;

   pv1 = 16;

}
  gh8 += 1;  
 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}



function nine9()
{
  if(gh9 >1)
  {

    gh9 = 0;
     pv1 = 22;
     co5 = 0;
     co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
     document.getElementById("nin9").style.backgroundColor=" #4CAF50";
     document.getElementById("itemStatus").innerHTML=co1 + co2 + co3 + co5 + co6 + co7;



  }
  else{
  pv3= 16;
  co5 = 1;
  co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
  document.getElementById("nin9").style.backgroundColor="tomato";
  document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;

   pv1 = 23;

}
  gh9 += 1;  
 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}


function ten10()
{
  if(gh10 >1)
  {

    gh10 = 0;
     pv1 = 24;
     co6 = 0;
     co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
     document.getElementById("te10").style.backgroundColor=" #4CAF50";
     document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;



  }
  else{
  pv3= 16;
  co6 = 1;
  co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
  document.getElementById("te10").style.backgroundColor="tomato";
  document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;

   pv1 = 25;

}
  gh10 += 1;  
 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}




function eleven11()
{
  if(gh11 >1)
  {

    gh11 = 0;
     pv1 = 26;
     co7 = 0;
     co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
     document.getElementById("ele11").style.backgroundColor=" #4CAF50";
     document.getElementById("itemStatus").innerHTML= co1 + co2 + co3 + co5 + co6 + co7;



  }
  else{
  pv3= 16;
  co7 = 1;
  co4 = co1 + co2 + co3 + co5 + co6 + co7;
   
  document.getElementById("ele11").style.backgroundColor="tomato";
  document.getElementById("itemStatus").innerHTML=co1 + co2 + co3 + co5 + co6 + co7;

   pv1 = 27;

}
  gh11 += 1;  
 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}

function nine()
{

 
  pv3= 18;
   pv1 = 18;

 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
send_data();
}

function ten()
{
 
  pv3= 20;
   pv1 = 20;

 //pv1 = 0 ; pv2 = 0; pv3 = 0; pv4 = 0; pv5 = 0; pv6 = 0; pv7 = 0; pv8 = 0;
 send_data();
}


  </script>

</body >
</html> 


)=====";

// ipaddress/led1/on
//ipaddress/led1/off

// ipaddress/led2/on
//ipaddress/led2/off
#include <ESPAsyncWebServer.h>

AsyncWebServer server(80); // server port 80
WebSocketsServer websockets(81);

void notFound(AsyncWebServerRequest *request)
{
  request->send(404, "text/plain", "Page Not found");
}


void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

  switch (type) 
  {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Disconnected!\n", num);
      break;
    case WStype_CONNECTED: {
        IPAddress ip = websockets.remoteIP(num);
        Serial.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

        // send message to client
        websockets.sendTXT(num, "Connected from server");
      }
      break;
    case WStype_TEXT:
      Serial.printf("[%u] get Text: %s\n", num, payload);
      String message = String((char*)( payload));
      Serial.println(message);

      
     DynamicJsonDocument doc(200);
    // deserialize the data
    DeserializationError error = deserializeJson(doc, message);
    // parse the parameters we expect to receive (TO-DO: error handling)
      // Test if parsing succeeds.
  if (error) {
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.c_str());
    return;
  }


 int LED1_status = doc["T"];
  int LED2_status = doc["W"];
  int TWCF = doc["TWC"];
   pv1 = doc["p1"];
   pv2 = doc["p2"];
   pv3 = doc["p3"];
   pv4 = doc["p4"];
   pv5 = doc["p5"];
 // digitalWrite(LED1,LED1_status);
  //digitalWrite(LED2,LED2_status);
  //Serial.println(LED1_status);
  button_flag= LED1_status;
  button_flag1= LED2_status;
  p1  = pv1 ;p2  = pv2 ;p3  = pv3 ;p4  = pv4 ;p5  = pv5 ;p6  = pv6 ;p7  = pv7 ;
  TWC = TWCF; //TESTER WRITER CACHE FLAG (TWCF)

  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








void forward()
{  
  //forword

digitalWrite(in1, LOW);  //Right Motor forword Pin 
digitalWrite(in2, HIGH); //Right Motor backword Pin  
digitalWrite(in3, LOW);  //Left Motor backword Pin 
 digitalWrite(in4, HIGH); //Left Motor forword Pin 
 //ledcWrite(pwmChannel, 255);

}


void turnRight()
{ 
  //turnRight

       Serial.println(" right ");

digitalWrite(in1, HIGH); //Right Motor forword Pin 
digitalWrite(in2, LOW);  //Right Motor backword Pin 
digitalWrite(in3, LOW);  //Left Motor backword Pin 
digitalWrite(in4, HIGH); //Left Motor forword Pin 
//ledcWrite(pwmChannel, 255);
}

void turnLeft()
{ 
  //turnLeft
         Serial.println(" left ");

  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  //ledcWrite(pwmChannel, 255);

}


void Stop()
{ 
  //stop
     //  Serial.println(" stop ");

digitalWrite(in1, LOW); //Right Motor forword Pin 
digitalWrite(in2, LOW); //Right Motor backword Pin 
digitalWrite(in3, LOW); //Left Motor backword Pin 
digitalWrite(in4, LOW); //Left Motor forword Pin 

}


void backward()
{
         Serial.println(" Forward ");
digitalWrite(in1, HIGH); //Right Motor forword Pin 
digitalWrite(in2, LOW);  //Right Motor backword Pin 
digitalWrite(in3, HIGH); //Left Motor backword Pin 
digitalWrite(in4, LOW);  //Left Motor forword Pin 


}
void Remote()
{
  digitalWrite(in1, LOW); //Right Motor forword Pin 
digitalWrite(in2, HIGH);  //Right Motor backword Pin 
digitalWrite(in3, LOW); //Left Motor backword Pin 
digitalWrite(in4, HIGH);  //Left Motor forword Pin 

}

void Rfid_read()
{
   mfrc522.PICC_IsNewCardPresent();
   mfrc522.PICC_ReadCardSerial();

   String content= ""; 
  for (byte i = 0; i < mfrc522.uid.size; i++) {
 //   Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
  //  Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));  
    content.concat(String(mfrc522.uid.uidByte[i], HEX));  
 
  }
  Serial.println();
  content.toUpperCase();   
 // Serial.println(content.substring(1));


//  A2 1C 33 1F  6

// 92 E9 E1 1F  4 


//C1 17 18 61  3

// 33 37 1E AB 2
 
//01 6B 5C 61   1

//D1 E4 67 61   5

// A2 DA ED 1F








 if (content.substring(1) == "01 6B 5C 61") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 1 detected");  /*Print message if UID match with the database*/
    Serial.println();
  //delay(100);
  RfidFlag = 1;
  }

   if (content.substring(1) == "33 37 1E AB") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 2 detected");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
  RfidFlag = 2;
  }

     if (content.substring(1) == "C1 17 18 61") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 3 detected");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
   RfidFlag = 3 ;
  }


     if (content.substring(1) == "92 E9 E1 1F") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 4 detected");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
   RfidFlag = 4 ;
  }



     if (content.substring(1) == "D1 E4 67 61") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 5 detected");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
   RfidFlag = 5 ;
  }


     if (content.substring(1) == "A2 1C 33 1F") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("Product 6 detected");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
   RfidFlag = 9 ;
  }
       if (content.substring(1) == "A2 DA ED 1F") /*UID for the Card/Tag we want to give access Replace with your card UID*/
  {
  Serial.println("HOME");  /*Print message if UID match with the database*/
    Serial.println();
 // delay(100);
   RfidFlag = 6 ;
  }
}

void ultra()
{
digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  
  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  Serial.print("Distance (inch): ");
  Serial.println(distanceInch);
  
 
  
}


void LineFollow()
{ //ultra();
   if((digitalRead(R_S) == 0)&&(digitalRead(L_S) == 0) && distanceCm > 30){
  backward();
  
  ledcWrite(pwmChannel, 200);
  Serial.println("Forward");
   //delay(100);
  }   //if Right Sensor and Left Sensor are at White color then it will call forword function

if((digitalRead(R_S) == 1)&&(digitalRead(L_S) == 0)&& distanceCm > 30)
{
  turnLeft();
  ledcWrite(pwmChannel, 170);
  Serial.println("Right");
 
  } //if Right Sensor is Black and Left Sensor is White then it will call turn Right function  

if((digitalRead(R_S) == 0)&&(digitalRead(L_S) == 1)&& distanceCm > 30)
{
  turnRight();
  ledcWrite(pwmChannel, 170);
Serial.println("Left");

}  //if Right Sensor is White and Left Sensor is Black then it will call turn Left function

if((digitalRead(R_S) == 1)&&(digitalRead(L_S) == 1) && lineStop == 0 || distanceCm < 30)
{
  //lineStop =1;
  Stop();
  delay(500);
  Serial.println("Stop");
  } //if Right Sensor and Left Sensor are at Black color then it will call Stop function
/*
if((digitalRead(R_S) == 1)&&(digitalRead(L_S) == 1))
  Rfid_read();
  
}*/
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup(void)
{
  
  Serial.begin(115200);
 // pinMode(LED1,OUTPUT);
  //pinMode(LED2,OUTPUT);
   // EEPROM.begin(512);

   ///////////////////////////////////////////////////
 SPI.begin();          /*SPI communication initialized*/
  mfrc522.PCD_Init();   /*RFID sensor initialized*/
//  pinMode(LED_G, OUTPUT);  /*LED Pin set as output*/
  Serial.println("Put your card to the reader...");
  Serial.println();

ledcSetup(pwmChannel, freq, resolution);
   ledcAttachPin(enable1Pin, pwmChannel);
    pinMode(in1, OUTPUT); 
    pinMode(in2, OUTPUT); 
    pinMode(in3, OUTPUT); 
    pinMode(in4, OUTPUT); 
    pinMode(R_S, INPUT); 
    pinMode(L_S, INPUT);
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input

ledcWrite(pwmChannel, 170);
digitalWrite(in1, LOW); //Right Motor forword Pin 
digitalWrite(in2, LOW);  //Right Motor backword Pin 
digitalWrite(in3, LOW); //Left Motor backword Pin 
digitalWrite(in4, LOW);

///////////////////////////////////////////////////////////////////
  WiFi.softAP("Trolley", "password");
  Serial.println("softap");
  Serial.println("");
  Serial.println(WiFi.softAPIP());

  if (MDNS.begin("ESP")) { //esp.local/
    Serial.println("MDNS responder started");
  }
  server.on("/", [](AsyncWebServerRequest * request)
  { 
   
  request->send_P(200, "text/html", webpage);
  });

   server.on("/led1/on", HTTP_GET, [](AsyncWebServerRequest * request)
  { 
    //digitalWrite(LED1,HIGH);
  request->send_P(200, "text/html", webpage);
  });

  server.onNotFound(notFound);

  server.begin();  // it will start webserver
  websockets.begin();
  websockets.onEvent(webSocketEvent);

}


void loop(void)
{
   websockets.loop();
    if( pv1 == 7 )
    turnRight();
        if( pv1 == 3 )
    turnLeft();
        if( pv1 == 1 )
    backward();
        if( pv1 == 9 )
    forward();
        if( pv1 == 5 ){
    Stop();
    shopFlag= 0;
        }
    
 if( pv1 == 12 )
 pro1Flag = 1;
 if( pv1 == 14 )
 pro2Flag = 1;
 if( pv1 == 16 )
 pro3Flag = 1;

if( pv1 == 11 )
 pro1Flag = 0;
 if( pv1 == 13 )
 pro1Flag = 0;
 if( pv1 == 15 )
 pro1Flag = 0;

 if( pv1 == 23 )
 pro4Flag = 1;
if( pv1 == 25 )
 pro5Flag = 1;
 if( pv1 == 27 )
 pro6Flag = 1;

 if( pv1 == 22 )
 pro4Flag = 0;
if( pv1 == 24 )
 pro5Flag = 0;
 if( pv1 == 26 )
 pro6Flag = 0;

 
 if( pv1 == 18 )
 shopFlag = 1;
if( pv1 == 20 )
 returnFlag = 1;
if(pro1Flag == 0 && pro2Flag == 0 && pro3Flag == 0 && shopFlag == 1 && returnFlag == 0)
{
  if(RfidFlag == 6)
      {
          Stop();
          shopFlag = 0;
                   Serial.println(" shop stop");

      }
      else
      {
         Rfid_read();
         LineFollow();
         Serial.println(" shop flag");
      }
}

if( returnFlag == 1)
{
  if(RfidFlag == 6)
      {                  
        Rfid_read();
          Stop();

          returnFlag = 0;
                   Serial.println(" park flag");

      }
      else
      {
         Rfid_read();
         LineFollow();
                  Serial.println(" park ");

      }
}
if(pro1Flag == 1 &&  shopFlag == 1)
{  NewRfidFlag = RfidFlag;
  ultra();
  Serial.println("Product 1 Flag");
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 1)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   Serial.println("rfid 1 detected");  
   delay(10000);

   pro1Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}

else if(pro2Flag == 1 &&  shopFlag == 1)
{
  ultra();
  Serial.println("Product 2 Flag");
  NewRfidFlag = RfidFlag;
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 2)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   delay(10000);
   Serial.println("rfid 2 detected");
   pro2Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}
else if(pro3Flag == 1 &&  shopFlag == 1)
{
  ultra();
  Serial.println("Product 3 Flag");
  NewRfidFlag = RfidFlag;
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 3)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   delay(10000);
   Serial.println("rfid 2 detected");
   pro3Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}



else if(pro4Flag == 1 &&  shopFlag == 1)
{
  ultra();
  Serial.println("Product 4 Flag");
  NewRfidFlag = RfidFlag;
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 4)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   delay(10000);
   Serial.println("rfid 4 detected");
   pro4Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}



else if(pro5Flag == 1 &&  shopFlag == 1)
{
  ultra();
  Serial.println("Product 5 Flag");
  NewRfidFlag = RfidFlag;
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 5)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   delay(10000);
   Serial.println("rfid 5 detected");
   pro5Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}


else if(pro6Flag == 1 &&  shopFlag == 1)
{
  ultra();
  Serial.println("Product 6 Flag");
  NewRfidFlag = RfidFlag;
  Rfid_read();
  LineFollow();
 if(NewRfidFlag != RfidFlag )
  {

    if(RfidFlag == 9)
      {
      Stop();
   NewRfidFlag = RfidFlag;
   delay(10000);
   Serial.println("rfid 6 detected");
   pro6Flag = 0;
   
    }
    else{
    backward();
    Serial.println(" Rfid Back ");

}
  }
}

  int NewVal = pv4;
 websockets.loop();

    yield();
    //delay(60);
    
}
